{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNR2HJhK73hZiDU81VrGeWi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "0b692a3887374618bcffb57274f6d271": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_8811075ca62f4f39807e6fc4e1bcbe80",
              "IPY_MODEL_596466fb37d749599bf3dacc032bd6b8",
              "IPY_MODEL_69b272ffa39a43c5b8beb9dc870eec88"
            ],
            "layout": "IPY_MODEL_004dd687c1a14a0e8aa0975c219ac6d9"
          }
        },
        "8811075ca62f4f39807e6fc4e1bcbe80": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_e6e787f87990420f8b03f0ce8e9e8aa5",
            "placeholder": "​",
            "style": "IPY_MODEL_b3ce04a6cbc04a7da5d7e6d568fe4d4c",
            "value": "Computing transition probabilities: 100%"
          }
        },
        "596466fb37d749599bf3dacc032bd6b8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d798726c9f4d4472b6daf2199ed76bc5",
            "max": 505,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_36fdfde53834471d89c9498b53d7a1ed",
            "value": 505
          }
        },
        "69b272ffa39a43c5b8beb9dc870eec88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5d527ec5e1104ea5a5489d3a3d3441e0",
            "placeholder": "​",
            "style": "IPY_MODEL_90b043bc188f4a4ab3117b634c49633d",
            "value": " 505/505 [00:00&lt;00:00, 6739.67it/s]"
          }
        },
        "004dd687c1a14a0e8aa0975c219ac6d9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "e6e787f87990420f8b03f0ce8e9e8aa5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b3ce04a6cbc04a7da5d7e6d568fe4d4c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "d798726c9f4d4472b6daf2199ed76bc5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "36fdfde53834471d89c9498b53d7a1ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5d527ec5e1104ea5a5489d3a3d3441e0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "90b043bc188f4a4ab3117b634c49633d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sondhi16/link-prediction-for-parkinson-mouse-data/blob/main/python%20code%20for%20link%20prediction(colab)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JwmJrsyintcj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torch"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7dDDN-sJ_jRw",
        "outputId": "819fe28b-5319-497a-a2e1-53511c51a19c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.6.0+cu124)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.18.0)\n",
            "Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch) (4.14.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.6)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2025.3.2)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.5.8)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch) (11.2.1.3)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.5.147)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch) (11.6.1.9)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch) (12.3.1.170)\n",
            "Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch) (0.6.2)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch) (12.4.127)\n",
            "Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.2.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "def format_pytorch_version(version):\n",
        "  return version.split('+')[0]\n",
        "\n",
        "TORCH_version = torch.__version__\n",
        "TORCH = format_pytorch_version(TORCH_version)\n",
        "\n",
        "def format_cuda_version(version):\n",
        "  return 'cu' + version.replace('.', '')\n",
        "\n",
        "CUDA_version = torch.version.cuda\n",
        "CUDA = format_cuda_version(CUDA_version)\n",
        "\n",
        "!pip install torch-scatter     -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n",
        "!pip install torch-sparse      -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n",
        "!pip install torch-cluster     -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n",
        "!pip install torch-spline-conv -f https://pytorch-geometric.com/whl/torch-{TORCH}+{CUDA}.html\n",
        "!pip install torch-geometric"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EW2pLwwCEMpg",
        "outputId": "88eec1dc-aa87-4517-b20a-914cf08ea503"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in links: https://pytorch-geometric.com/whl/torch-2.6.0+cu124.html\n",
            "Requirement already satisfied: torch-scatter in /usr/local/lib/python3.11/dist-packages (2.1.2+pt26cu124)\n",
            "Looking in links: https://pytorch-geometric.com/whl/torch-2.6.0+cu124.html\n",
            "Requirement already satisfied: torch-sparse in /usr/local/lib/python3.11/dist-packages (0.6.18+pt26cu124)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-sparse) (1.13.1)\n",
            "Requirement already satisfied: numpy<2.3,>=1.22.4 in /usr/local/lib/python3.11/dist-packages (from scipy->torch-sparse) (1.26.4)\n",
            "Looking in links: https://pytorch-geometric.com/whl/torch-2.6.0+cu124.html\n",
            "Requirement already satisfied: torch-cluster in /usr/local/lib/python3.11/dist-packages (1.6.3+pt26cu124)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from torch-cluster) (1.13.1)\n",
            "Requirement already satisfied: numpy<2.3,>=1.22.4 in /usr/local/lib/python3.11/dist-packages (from scipy->torch-cluster) (1.26.4)\n",
            "Looking in links: https://pytorch-geometric.com/whl/torch-2.6.0+cu124.html\n",
            "Requirement already satisfied: torch-spline-conv in /usr/local/lib/python3.11/dist-packages (1.2.2+pt26cu124)\n",
            "Requirement already satisfied: torch-geometric in /usr/local/lib/python3.11/dist-packages (2.6.1)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.11.15)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2025.3.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.1.6)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (1.26.4)\n",
            "Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (5.9.5)\n",
            "Requirement already satisfied: pyparsing in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (3.2.3)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from torch-geometric) (4.67.1)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.4.0)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.7.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (6.6.3)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (0.3.2)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->torch-geometric) (1.20.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch-geometric) (3.0.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->torch-geometric) (2025.7.14)\n",
            "Requirement already satisfied: typing-extensions>=4.2 in /usr/local/lib/python3.11/dist-packages (from aiosignal>=1.1.2->aiohttp->torch-geometric) (4.14.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install node2vec"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wlT8fENi2cyZ",
        "outputId": "8f2bcaed-9bc9-417b-b1ea-83c1bf9d389f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: node2vec in /usr/local/lib/python3.11/dist-packages (0.5.0)\n",
            "Requirement already satisfied: gensim<5.0.0,>=4.3.0 in /usr/local/lib/python3.11/dist-packages (from node2vec) (4.3.3)\n",
            "Requirement already satisfied: joblib<2.0.0,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from node2vec) (1.5.1)\n",
            "Requirement already satisfied: networkx<4.0.0,>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from node2vec) (3.5)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.24.0 in /usr/local/lib/python3.11/dist-packages (from node2vec) (1.26.4)\n",
            "Requirement already satisfied: tqdm<5.0.0,>=4.66.1 in /usr/local/lib/python3.11/dist-packages (from node2vec) (4.67.1)\n",
            "Requirement already satisfied: scipy<1.14.0,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from gensim<5.0.0,>=4.3.0->node2vec) (1.13.1)\n",
            "Requirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.11/dist-packages (from gensim<5.0.0,>=4.3.0->node2vec) (7.3.0.post1)\n",
            "Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open>=1.8.1->gensim<5.0.0,>=4.3.0->node2vec) (1.17.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "A3ZX9P8L_HBh",
        "outputId": "500f0045-8f32-4b1e-a6f6-4ff0c008eb0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ce6a3a65-3df8-42d6-9555-eac1fee1e712\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ce6a3a65-3df8-42d6-9555-eac1fee1e712\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving combined network.graphml to combined network (3).graphml\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**VGAE METHOD CODE**"
      ],
      "metadata": {
        "id": "1R4H9ptDAp2o"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "TPHZWIQf-0th",
        "outputId": "b77b1c71-bebd-48a2-8775-711080336822"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:   0 | Loss: 3.3934 | Val AUC: 0.4124 | Val AP: 0.4444\n",
            "Epoch:  20 | Loss: 1.4415 | Val AUC: 0.4819 | Val AP: 0.4758\n",
            "Epoch:  40 | Loss: 1.4199 | Val AUC: 0.4607 | Val AP: 0.4584\n",
            "Epoch:  60 | Loss: 1.3504 | Val AUC: 0.5938 | Val AP: 0.5810\n",
            "Epoch:  80 | Loss: 1.2016 | Val AUC: 0.6326 | Val AP: 0.6239\n",
            "Epoch: 100 | Loss: 1.1286 | Val AUC: 0.6650 | Val AP: 0.6608\n",
            "Epoch: 120 | Loss: 1.0972 | Val AUC: 0.6664 | Val AP: 0.6622\n",
            "Epoch: 140 | Loss: 1.0781 | Val AUC: 0.6989 | Val AP: 0.6950\n",
            "Epoch: 160 | Loss: 1.0827 | Val AUC: 0.7116 | Val AP: 0.7186\n",
            "Epoch: 180 | Loss: 1.0516 | Val AUC: 0.7190 | Val AP: 0.7007\n",
            "\n",
            "Test AUC: 0.8000 | Test AP: 0.7747\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch_geometric.nn import VGAE, GCNConv\n",
        "from torch_geometric.transforms import Compose, NormalizeFeatures, ToDevice, RandomLinkSplit\n",
        "from torch_geometric.utils import from_networkx\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "torch.manual_seed(42)\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "nx_graph = nx.read_graphml(\"combined network.graphml\")\n",
        "nx_graph = nx_graph.to_undirected() if nx.is_directed(nx_graph) else nx_graph\n",
        "\n",
        "data = from_networkx(nx_graph)\n",
        "\n",
        "if not hasattr(data, 'x') or data.x is None:\n",
        "    data.x = torch.eye(data.num_nodes, dtype=torch.float)\n",
        "\n",
        "transform = Compose([\n",
        "    NormalizeFeatures(),\n",
        "    ToDevice(device),\n",
        "    RandomLinkSplit(num_val=0.05, num_test=0.1, is_undirected=True,\n",
        "                    split_labels=True, add_negative_train_samples=False)\n",
        "])\n",
        "\n",
        "train_data, val_data, test_data = transform(data)\n",
        "\n",
        "class Encoder(torch.nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, dropout=0.2):\n",
        "        super().__init__()\n",
        "        self.conv1 = GCNConv(in_channels, 2 * out_channels)\n",
        "        self.conv_mu = GCNConv(2 * out_channels, out_channels)\n",
        "        self.conv_logstd = GCNConv(2 * out_channels, out_channels)\n",
        "        self.dropout = dropout\n",
        "\n",
        "    def forward(self, x, edge_index):\n",
        "        x = F.relu(self.conv1(x, edge_index))\n",
        "        x = F.dropout(x, p=self.dropout, training=self.training)\n",
        "        return self.conv_mu(x, edge_index), self.conv_logstd(x, edge_index)\n",
        "\n",
        "model = VGAE(Encoder(train_data.num_features, 16, dropout=0.2)).to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n",
        "\n",
        "def train():\n",
        "    model.train()\n",
        "    optimizer.zero_grad()\n",
        "    z = model.encode(train_data.x, train_data.edge_index)\n",
        "    loss = model.recon_loss(z, train_data.pos_edge_label_index)\n",
        "    loss += (1 / train_data.num_nodes) * model.kl_loss()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    return float(loss)\n",
        "\n",
        "@torch.no_grad()\n",
        "def test(data):\n",
        "    model.eval()\n",
        "    z = model.encode(data.x, data.edge_index)\n",
        "    return model.test(z, data.pos_edge_label_index, data.neg_edge_label_index)\n",
        "\n",
        "loss_values = []\n",
        "for epoch in range(181):\n",
        "    loss = train()\n",
        "    loss_values.append(loss)\n",
        "    val_auc, val_ap = test(val_data)\n",
        "    if epoch % 20 == 0:\n",
        "        print(f'Epoch: {epoch:>3} | Loss: {loss:.4f} | Val AUC: {val_auc:.4f} | Val AP: {val_ap:.4f}')\n",
        "\n",
        "test_auc, test_ap = test(test_data)\n",
        "print(f'\\nTest AUC: {test_auc:.4f} | Test AP: {test_ap:.4f}')\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.plot(range(181), loss_values, label='Training Loss', color='blue')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Epoch vs Training Loss for VGAE method')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**GAE MEHOD CODE**\n"
      ],
      "metadata": {
        "id": "z_TGFqkqA6cP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch_geometric.nn import GAE, GCNConv\n",
        "from torch_geometric.transforms import Compose, NormalizeFeatures, ToDevice, RandomLinkSplit\n",
        "from torch_geometric.utils import from_networkx\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "torch.manual_seed(42)\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "nx_graph = nx.read_graphml(\"combined network.graphml\")\n",
        "nx_graph = nx_graph.to_undirected() if nx.is_directed(nx_graph) else nx.Graph(nx_graph)\n",
        "data = from_networkx(nx_graph)\n",
        "\n",
        "if not hasattr(data, 'x') or data.x is None:\n",
        "    data.x = torch.eye(data.num_nodes, dtype=torch.float)\n",
        "\n",
        "transform = Compose([\n",
        "    NormalizeFeatures(),\n",
        "    ToDevice(device),\n",
        "    RandomLinkSplit(num_val=0.05, num_test=0.1, is_undirected=True,\n",
        "                    split_labels=True, add_negative_train_samples=False)\n",
        "])\n",
        "train_data, val_data, test_data = transform(data)\n",
        "\n",
        "class GAEEncoder(torch.nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, dropout=0.2):\n",
        "        super().__init__()\n",
        "        self.conv1 = GCNConv(in_channels, 2 * out_channels)\n",
        "        self.conv2 = GCNConv(2 * out_channels, out_channels)\n",
        "        self.dropout = dropout\n",
        "\n",
        "    def forward(self, x, edge_index):\n",
        "        x = F.relu(self.conv1(x, edge_index))\n",
        "        x = F.dropout(x, p=self.dropout, training=self.training)\n",
        "        return self.conv2(x, edge_index)\n",
        "\n",
        "model = GAE(GAEEncoder(train_data.num_features, 16, dropout=0.2)).to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n",
        "\n",
        "def train():\n",
        "    model.train()\n",
        "    optimizer.zero_grad()\n",
        "    z = model.encode(train_data.x, train_data.edge_index)\n",
        "    loss = model.recon_loss(z, train_data.pos_edge_label_index)\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    return float(loss)\n",
        "\n",
        "@torch.no_grad()\n",
        "def test(data):\n",
        "    model.eval()\n",
        "    z = model.encode(data.x, data.edge_index)\n",
        "    return model.test(z, data.pos_edge_label_index, data.neg_edge_label_index)\n",
        "\n",
        "loss_values = []\n",
        "\n",
        "for epoch in range(151):\n",
        "    loss = train()\n",
        "    loss_values.append(loss)\n",
        "    val_auc, val_ap = test(val_data)\n",
        "    if epoch % 20 == 0:\n",
        "        print(f'Epoch: {epoch:>3} | Loss: {loss:.4f} | Val AUC: {val_auc:.4f} | Val AP: {val_ap:.4f}')\n",
        "\n",
        "test_auc, test_ap = test(test_data)\n",
        "print(f'\\nTest AUC: {test_auc:.4f} | Test AP: {test_ap:.4f}')\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.plot(range(151), loss_values, label='Training Loss', color='red')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Epoch vs Training Loss for GAE Method')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 790
        },
        "id": "UXi-udGwA6KH",
        "outputId": "eb058114-b313-4e26-88a1-40a91fa12ff3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:   0 | Loss: 1.3859 | Val AUC: 0.4429 | Val AP: 0.4906\n",
            "Epoch:  20 | Loss: 1.1500 | Val AUC: 0.6522 | Val AP: 0.6719\n",
            "Epoch:  40 | Loss: 1.0294 | Val AUC: 0.6629 | Val AP: 0.6441\n",
            "Epoch:  60 | Loss: 1.0010 | Val AUC: 0.6666 | Val AP: 0.6326\n",
            "Epoch:  80 | Loss: 0.9913 | Val AUC: 0.6591 | Val AP: 0.6369\n",
            "Epoch: 100 | Loss: 0.9549 | Val AUC: 0.6963 | Val AP: 0.6870\n",
            "Epoch: 120 | Loss: 0.9364 | Val AUC: 0.7065 | Val AP: 0.6729\n",
            "Epoch: 140 | Loss: 0.9498 | Val AUC: 0.7090 | Val AP: 0.6815\n",
            "\n",
            "Test AUC: 0.7467 | Test AP: 0.7368\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "SEAL METHOD"
      ],
      "metadata": {
        "id": "LlkGeS4rIgQ5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch.nn import Conv1d, MaxPool1d, Linear, Dropout, BCEWithLogitsLoss\n",
        "from torch_geometric.utils import from_networkx, to_scipy_sparse_matrix, k_hop_subgraph\n",
        "from torch_geometric.data import Data\n",
        "from torch_geometric.loader import DataLoader\n",
        "from torch_geometric.transforms import Compose, NormalizeFeatures, ToDevice, RandomLinkSplit\n",
        "from torch_geometric.nn import GCNConv, aggr\n",
        "from sklearn.metrics import roc_auc_score, average_precision_score\n",
        "from scipy.sparse.csgraph import shortest_path\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "np.random.seed(42)\n",
        "torch.manual_seed(42)\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "\n",
        "nx_graph = nx.read_graphml(\"combined network.graphml\")\n",
        "nx_graph = nx_graph.to_undirected() if nx.is_directed(nx_graph) else nx.Graph(nx_graph)\n",
        "data = from_networkx(nx_graph)\n",
        "\n",
        "if not hasattr(data, 'x') or data.x is None:\n",
        "    data.x = torch.eye(data.num_nodes, dtype=torch.float)\n",
        "\n",
        "transform = Compose([\n",
        "    NormalizeFeatures(),\n",
        "    ToDevice(device),\n",
        "    RandomLinkSplit(num_val=0.05, num_test=0.1, is_undirected=True, split_labels=True)\n",
        "])\n",
        "train_data, val_data, test_data = transform(data)\n",
        "\n",
        "def seal_processing(data, edge_label_index, y):\n",
        "    data_list = []\n",
        "    for src_orig, dst_orig in edge_label_index.t().tolist():\n",
        "        sub_nodes, sub_edge_index, mapping, _ = k_hop_subgraph(\n",
        "            [src_orig, dst_orig], 2, data.edge_index, relabel_nodes=True)\n",
        "        src, dst = mapping.tolist()\n",
        "\n",
        "        mask1 = (sub_edge_index[0] != src) | (sub_edge_index[1] != dst)\n",
        "        mask2 = (sub_edge_index[0] != dst) | (sub_edge_index[1] != src)\n",
        "        sub_edge_index = sub_edge_index[:, mask1 & mask2]\n",
        "\n",
        "        adj = to_scipy_sparse_matrix(sub_edge_index, num_nodes=sub_nodes.size(0)).tocsr()\n",
        "\n",
        "        idx_wo_dst = [i for i in range(adj.shape[0]) if i != dst]\n",
        "        adj_wo_dst = adj[idx_wo_dst, :][:, idx_wo_dst]\n",
        "        src_reindexed = idx_wo_dst.index(src)\n",
        "        d_src = shortest_path(adj_wo_dst, directed=False, unweighted=True, indices=src_reindexed)\n",
        "        d_src = np.insert(d_src, dst, 0)\n",
        "\n",
        "        idx_wo_src = [i for i in range(adj.shape[0]) if i != src]\n",
        "        adj_wo_src = adj[idx_wo_src, :][:, idx_wo_src]\n",
        "        dst_reindexed = idx_wo_src.index(dst)\n",
        "        d_dst = shortest_path(adj_wo_src, directed=False, unweighted=True, indices=dst_reindexed)\n",
        "        d_dst = np.insert(d_dst, src, 0)\n",
        "\n",
        "        d_src = torch.tensor(d_src)\n",
        "        d_dst = torch.tensor(d_dst)\n",
        "\n",
        "        dist = d_src + d_dst\n",
        "        z = 1 + torch.min(d_src, d_dst) + dist // 2 * (dist // 2 + dist % 2 - 1)\n",
        "        z[src], z[dst], z[torch.isnan(z)] = 1., 1., 0.\n",
        "        z = z.to(torch.long)\n",
        "\n",
        "        node_labels = F.one_hot(z, num_classes=200).float()\n",
        "        node_x = torch.cat([data.x[sub_nodes], node_labels], dim=1)\n",
        "\n",
        "        data_obj = Data(x=node_x, z=z, edge_index=sub_edge_index, y=torch.tensor([y]))\n",
        "        data_list.append(data_obj)\n",
        "\n",
        "    return data_list\n",
        "\n",
        "train_dataset = seal_processing(train_data, train_data.pos_edge_label_index, 1) + \\\n",
        "                seal_processing(train_data, train_data.neg_edge_label_index, 0)\n",
        "\n",
        "val_dataset = seal_processing(val_data, val_data.pos_edge_label_index, 1) + \\\n",
        "              seal_processing(val_data, val_data.neg_edge_label_index, 0)\n",
        "\n",
        "test_dataset = seal_processing(test_data, test_data.pos_edge_label_index, 1) + \\\n",
        "               seal_processing(test_data, test_data.neg_edge_label_index, 0)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
        "val_loader = DataLoader(val_dataset, batch_size=32)\n",
        "test_loader = DataLoader(test_dataset, batch_size=32)\n",
        "\n",
        "class DGCNN(torch.nn.Module):\n",
        "    def __init__(self, dim_in, k=30):\n",
        "        super().__init__()\n",
        "        self.gcn1 = GCNConv(dim_in, 32)\n",
        "        self.gcn2 = GCNConv(32, 32)\n",
        "        self.gcn3 = GCNConv(32, 32)\n",
        "        self.gcn4 = GCNConv(32, 1)\n",
        "\n",
        "        self.global_pool = aggr.SortAggregation(k=k)\n",
        "\n",
        "        self.conv1 = Conv1d(1, 16, 97, 97)\n",
        "        self.conv2 = Conv1d(16, 32, 5, 1)\n",
        "        self.maxpool = MaxPool1d(2, 2)\n",
        "\n",
        "        self.linear1 = Linear(352, 128)\n",
        "        self.dropout = Dropout(0.5)\n",
        "        self.linear2 = Linear(128, 1)\n",
        "\n",
        "    def forward(self, x, edge_index, batch):\n",
        "        h1 = self.gcn1(x, edge_index).tanh()\n",
        "        h2 = self.gcn2(h1, edge_index).tanh()\n",
        "        h3 = self.gcn3(h2, edge_index).tanh()\n",
        "        h4 = self.gcn4(h3, edge_index).tanh()\n",
        "        h = torch.cat([h1, h2, h3, h4], dim=-1)\n",
        "\n",
        "        h = self.global_pool(h, batch)\n",
        "        h = h.view(h.size(0), 1, h.size(-1))\n",
        "        h = self.conv1(h).relu()\n",
        "        h = self.maxpool(h)\n",
        "        h = self.conv2(h).relu()\n",
        "        h = h.view(h.size(0), -1)\n",
        "        h = self.linear1(h).relu()\n",
        "        h = self.dropout(h)\n",
        "        return self.linear2(h).sigmoid()\n",
        "\n",
        "model = DGCNN(train_dataset[0].num_features).to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n",
        "criterion = BCEWithLogitsLoss()\n",
        "\n",
        "def train():\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    for data in train_loader:\n",
        "        data = data.to(device)\n",
        "        optimizer.zero_grad()\n",
        "        out = model(data.x, data.edge_index, data.batch)\n",
        "        loss = criterion(out.view(-1), data.y.float())\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        total_loss += float(loss) * data.num_graphs\n",
        "    return total_loss / len(train_dataset)\n",
        "\n",
        "@torch.no_grad()\n",
        "def test(loader):\n",
        "    model.eval()\n",
        "    y_true, y_pred = [], []\n",
        "    for data in loader:\n",
        "        data = data.to(device)\n",
        "        out = model(data.x, data.edge_index, data.batch)\n",
        "        y_pred.append(out.view(-1).cpu())\n",
        "        y_true.append(data.y.float().cpu())\n",
        "    y_pred = torch.cat(y_pred)\n",
        "    y_true = torch.cat(y_true)\n",
        "    return roc_auc_score(y_true, y_pred), average_precision_score(y_true, y_pred)\n",
        "\n",
        "loss_values = []\n",
        "for epoch in range(11):\n",
        "    loss = train()\n",
        "    loss_values.append(loss)\n",
        "    val_auc, val_ap = test(val_loader)\n",
        "    if epoch % 1 == 0:\n",
        "        print(f'Epoch: {epoch:>3} | Loss: {loss:.4f} | Val AUC: {val_auc:.4f} | Val AP: {val_ap:.4f}')\n",
        "\n",
        "test_auc, test_ap = test(test_loader)\n",
        "print(f'\\nTest AUC: {test_auc:.4f} | Test AP: {test_ap:.4f}')\n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.plot(range(11), loss_values, label='Training Loss', color='black')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Epoch vs Training Loss for SEAL Method')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 844
        },
        "id": "uajMACoMIi4Y",
        "outputId": "2d812865-5f14-467d-b02e-82cc0101d6e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch:   0 | Loss: 0.6905 | Val AUC: 0.7574 | Val AP: 0.7539\n",
            "Epoch:   1 | Loss: 0.6562 | Val AUC: 0.7758 | Val AP: 0.7893\n",
            "Epoch:   2 | Loss: 0.6454 | Val AUC: 0.7708 | Val AP: 0.7892\n",
            "Epoch:   3 | Loss: 0.6376 | Val AUC: 0.7670 | Val AP: 0.7875\n",
            "Epoch:   4 | Loss: 0.6355 | Val AUC: 0.7733 | Val AP: 0.7735\n",
            "Epoch:   5 | Loss: 0.6321 | Val AUC: 0.7770 | Val AP: 0.7779\n",
            "Epoch:   6 | Loss: 0.6281 | Val AUC: 0.7837 | Val AP: 0.7882\n",
            "Epoch:   7 | Loss: 0.6251 | Val AUC: 0.7833 | Val AP: 0.7849\n",
            "Epoch:   8 | Loss: 0.6256 | Val AUC: 0.7755 | Val AP: 0.7820\n",
            "Epoch:   9 | Loss: 0.6240 | Val AUC: 0.7758 | Val AP: 0.7784\n",
            "Epoch:  10 | Loss: 0.6226 | Val AUC: 0.7835 | Val AP: 0.7741\n",
            "\n",
            "Test AUC: 0.8178 | Test AP: 0.8279\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "GAT METHOD"
      ],
      "metadata": {
        "id": "scaI5Ht70K5z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from torch_geometric.nn import GATConv\n",
        "from torch_geometric.utils import from_networkx\n",
        "from torch_geometric.transforms import RandomLinkSplit\n",
        "import networkx as nx\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import roc_auc_score, average_precision_score\n",
        "\n",
        "G = nx.read_graphml(\"combined network.graphml\")\n",
        "data = from_networkx(G)\n",
        "\n",
        "if not hasattr(data, 'x') or data.x is None:\n",
        "    data.x = torch.eye(data.num_nodes, dtype=torch.float)\n",
        "\n",
        "transform = RandomLinkSplit(\n",
        "    is_undirected=True,\n",
        "    split_labels=True,\n",
        "    add_negative_train_samples=True,\n",
        ")\n",
        "train_data, val_data, test_data = transform(data)\n",
        "\n",
        "class GATEncoder(torch.nn.Module):\n",
        "    def __init__(self, in_channels, out_channels):\n",
        "        super(GATEncoder, self).__init__()\n",
        "        self.gat1 = GATConv(in_channels, 8, heads=8, dropout=0.2)\n",
        "        self.gat2 = GATConv(8 * 8, out_channels, heads=1, concat=False, dropout=0.2)\n",
        "\n",
        "    def forward(self, x, edge_index):\n",
        "        x = self.gat1(x, edge_index)\n",
        "        x = F.elu(x)\n",
        "        x = self.gat2(x, edge_index)\n",
        "        return x\n",
        "\n",
        "def decode(z, edge_index):\n",
        "    return (z[edge_index[0]] * z[edge_index[1]]).sum(dim=1)\n",
        "\n",
        "@torch.no_grad()\n",
        "def evaluate(model, data):\n",
        "    model.eval()\n",
        "    z = model(data.x, data.edge_index)\n",
        "    pos_score = decode(z, data.pos_edge_label_index).sigmoid()\n",
        "    neg_score = decode(z, data.neg_edge_label_index).sigmoid()\n",
        "    y_pred = torch.cat([pos_score, neg_score])\n",
        "    y_true = torch.cat([torch.ones(pos_score.size(0)), torch.zeros(neg_score.size(0))])\n",
        "    auc = roc_auc_score(y_true.cpu(), y_pred.cpu())\n",
        "    ap = average_precision_score(y_true.cpu(), y_pred.cpu())\n",
        "    return auc, ap\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "model = GATEncoder(in_channels=data.x.size(-1), out_channels=64).to(device)\n",
        "optimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=5e-4)\n",
        "train_data = train_data.to(device)\n",
        "val_data = val_data.to(device)\n",
        "test_data = test_data.to(device)\n",
        "\n",
        "losses = []\n",
        "\n",
        "for epoch in range(81):\n",
        "    model.train()\n",
        "    optimizer.zero_grad()\n",
        "    z = model(train_data.x, train_data.edge_index)\n",
        "    pos_score = decode(z, train_data.pos_edge_label_index)\n",
        "    neg_score = decode(z, train_data.neg_edge_label_index)\n",
        "    score = torch.cat([pos_score, neg_score], dim=0)\n",
        "    label = torch.cat([torch.ones(pos_score.size(0)), torch.zeros(neg_score.size(0))], dim=0).to(device)\n",
        "    loss = F.binary_cross_entropy_with_logits(score, label)\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "\n",
        "    losses.append(loss.item())\n",
        "\n",
        "    if epoch % 10 == 0:\n",
        "        val_auc, val_ap = evaluate(model, val_data)\n",
        "        print(f\"Epoch {epoch:3d} | Loss: {loss:.4f} | Val AUC: {val_auc:.4f} | Val AP: {val_ap:.4f}\")\n",
        "\n",
        "test_auc, test_ap = evaluate(model, test_data)\n",
        "print(f\"\\nTest AUC: {test_auc:.4f} | Test AP: {test_ap:.4f}\")\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.plot(range(81), losses, label='Training Loss', color='blue')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.title('Epoch vs Training Loss for GAT Method')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 708
        },
        "id": "DBnzdA2KkHO8",
        "outputId": "5033df3d-63d1-4f1d-c064-c137a98b3472"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch   0 | Loss: 0.6910 | Val AUC: 0.5411 | Val AP: 0.5324\n",
            "Epoch  10 | Loss: 0.6910 | Val AUC: 0.5441 | Val AP: 0.5362\n",
            "Epoch  20 | Loss: 0.6912 | Val AUC: 0.5487 | Val AP: 0.5546\n",
            "Epoch  30 | Loss: 0.6910 | Val AUC: 0.5504 | Val AP: 0.5564\n",
            "Epoch  40 | Loss: 0.6897 | Val AUC: 0.5451 | Val AP: 0.5534\n",
            "Epoch  50 | Loss: 0.6877 | Val AUC: 0.5437 | Val AP: 0.5589\n",
            "Epoch  60 | Loss: 0.6807 | Val AUC: 0.5480 | Val AP: 0.5626\n",
            "Epoch  70 | Loss: 0.6548 | Val AUC: 0.5767 | Val AP: 0.5783\n",
            "Epoch  80 | Loss: 0.6023 | Val AUC: 0.5988 | Val AP: 0.5819\n",
            "\n",
            "Test AUC: 0.6282 | Test AP: 0.6050\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Heuristic based link prediction methods\n"
      ],
      "metadata": {
        "id": "HQc7re_DWNb_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import networkx as nx\n",
        "from sklearn.metrics import roc_auc_score, average_precision_score\n",
        "import random\n",
        "import math\n",
        "\n",
        "G = nx.read_graphml(\"combined network.graphml\")\n",
        "G = nx.convert_node_labels_to_integers(G)\n",
        "\n",
        "edges = list(G.edges())\n",
        "non_edges = list(nx.non_edges(G))\n",
        "random.shuffle(non_edges)\n",
        "\n",
        "num_samples = min(len(edges), len(non_edges))\n",
        "pos_edges = random.sample(edges, num_samples)\n",
        "neg_edges = random.sample(non_edges, num_samples)\n",
        "\n",
        "def jaccard(u, v):\n",
        "    return len(set(G[u]) & set(G[v])) / len(set(G[u]) | set(G[v])) if len(set(G[u]) | set(G[v])) > 0 else 0\n",
        "\n",
        "def common_neighbors(u, v):\n",
        "    return len(list(nx.common_neighbors(G, u, v)))\n",
        "\n",
        "def adamic_adar(u, v):\n",
        "    return sum(1 / math.log(nx.degree(G, w)) for w in nx.common_neighbors(G, u, v) if nx.degree(G, w) > 1)\n",
        "\n",
        "def preferential_attachment(u, v):\n",
        "    return nx.degree(G, u) * nx.degree(G, v)\n",
        "\n",
        "def compute_scores(method):\n",
        "    scores, labels = [], []\n",
        "    for u, v in pos_edges:\n",
        "        labels.append(1)\n",
        "        scores.append(method(u, v))\n",
        "    for u, v in neg_edges:\n",
        "        labels.append(0)\n",
        "        scores.append(method(u, v))\n",
        "    return scores, labels\n",
        "\n",
        "for name, func in {\n",
        "    'Common Neighbors': common_neighbors,\n",
        "    'Jaccard Coefficient': jaccard,\n",
        "    'Adamic-Adar': adamic_adar,\n",
        "    'Preferential Attachment': preferential_attachment}.items():\n",
        "    scores, labels = compute_scores(func)\n",
        "    auc = roc_auc_score(labels, scores)\n",
        "    ap = average_precision_score(labels, scores)\n",
        "    print(f\"{name:30s} AUC: {auc:.4f} | AP: {ap:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ec4D2AY1WWFY",
        "outputId": "f6215553-9552-4d6a-c3ac-c02c520aea91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Common Neighbors               AUC: 0.5894 | AP: 0.5712\n",
            "Jaccard Coefficient            AUC: 0.5885 | AP: 0.5720\n",
            "Adamic-Adar                    AUC: 0.5895 | AP: 0.5760\n",
            "Preferential Attachment        AUC: 0.6297 | AP: 0.6077\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Z1ctjbHO2S1x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Node2Vec + Random Forest Classifier Method for link prediction"
      ],
      "metadata": {
        "id": "vRwaU-hbJTU_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import networkx as nx\n",
        "import random\n",
        "import numpy as np\n",
        "from node2vec import Node2Vec\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import roc_auc_score, average_precision_score\n",
        "from tqdm import tqdm\n",
        "\n",
        "G = nx.read_graphml(\"combined network.graphml\")\n",
        "G = G.to_undirected()\n",
        "\n",
        "all_edges = list(G.edges())\n",
        "non_edges = list(nx.non_edges(G))\n",
        "random.seed(42)\n",
        "neg_samples = random.sample(non_edges, len(all_edges))\n",
        "\n",
        "pos_train, pos_test = train_test_split(all_edges, test_size=0.3, random_state=42)\n",
        "neg_train, neg_test = train_test_split(neg_samples, test_size=0.3, random_state=42)\n",
        "\n",
        "G_train = nx.Graph()\n",
        "G_train.add_nodes_from(G.nodes())\n",
        "G_train.add_edges_from(pos_train)\n",
        "\n",
        "node2vec = Node2Vec(G_train, dimensions=64, walk_length=10, num_walks=100, workers=2, seed=42)\n",
        "model = node2vec.fit(window=5, min_count=1)\n",
        "\n",
        "def get_edge_embedding(u, v):\n",
        "    return model.wv[u] * model.wv[v]\n",
        "\n",
        "def make_dataset(edge_list, label):\n",
        "    X, y = [], []\n",
        "    for u, v in edge_list:\n",
        "        if u in model.wv and v in model.wv:\n",
        "            X.append(get_edge_embedding(u, v))\n",
        "            y.append(label)\n",
        "    return X, y\n",
        "X_train_pos, y_train_pos = make_dataset(pos_train, 1)\n",
        "X_train_neg, y_train_neg = make_dataset(neg_train, 0)\n",
        "X_test_pos, y_test_pos = make_dataset(pos_test, 1)\n",
        "X_test_neg, y_test_neg = make_dataset(neg_test, 0)\n",
        "\n",
        "X_train = X_train_pos + X_train_neg\n",
        "y_train = y_train_pos + y_train_neg\n",
        "X_test = X_test_pos + X_test_neg\n",
        "y_test = y_test_pos + y_test_neg\n",
        "\n",
        "clf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "y_pred = clf.predict_proba(X_test)[:, 1]\n",
        "\n",
        "auc = roc_auc_score(y_test, y_pred)\n",
        "ap = average_precision_score(y_test, y_pred)\n",
        "\n",
        "print(f\"AUC: {auc:.4f}\")\n",
        "print(f\"AP : {ap:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85,
          "referenced_widgets": [
            "0b692a3887374618bcffb57274f6d271",
            "8811075ca62f4f39807e6fc4e1bcbe80",
            "596466fb37d749599bf3dacc032bd6b8",
            "69b272ffa39a43c5b8beb9dc870eec88",
            "004dd687c1a14a0e8aa0975c219ac6d9",
            "e6e787f87990420f8b03f0ce8e9e8aa5",
            "b3ce04a6cbc04a7da5d7e6d568fe4d4c",
            "d798726c9f4d4472b6daf2199ed76bc5",
            "36fdfde53834471d89c9498b53d7a1ed",
            "5d527ec5e1104ea5a5489d3a3d3441e0",
            "90b043bc188f4a4ab3117b634c49633d"
          ]
        },
        "id": "f3cvXyjVemRE",
        "outputId": "92b761f7-41ab-4ddc-eb31-7c085cb3a119"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Computing transition probabilities:   0%|          | 0/505 [00:00<?, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "0b692a3887374618bcffb57274f6d271"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC: 0.6954\n",
            "AP : 0.6870\n"
          ]
        }
      ]
    }
  ]
}